#!/bin/bash

# exit on failures
set -e
set -o pipefail

usage() {
  echo "Usage: $(basename "$0") [OPTIONS]" 1>&2
  echo "  -e <APP_ENVIRONMENTS> - App environment(s) (comma deliminated)  (Required)"
  echo "  -P <PROJECT_NAME>     - Project name                            (default: 'buy-for-your-school')"
  echo "  -u <CF_USER>          - Cloud Foundry Username                  (default: '\$CF_USER')"
  echo "  -p <CF_PASSWORD>      - Cloud Foundry Password                  (default: '\$CF_PASSWORD')"
  echo "  -s <CF_SPACE>         - Cloud Foundry Space                     (default: 'sct-\$APP_ENVIRONMENT')"
  echo "  -h                    - help"
  exit 1
}

# if there are no arguments passed exit with usage
if [ $# -lt 1 ];
then
 usage
fi

APP_ENVIRONMENTS="${APP_ENVIRONMENTS:-}"
PROJECT_NAME="${PROJECT_NAME:-buy-for-your-school}"
CF_USER="${CF_USER:-}"
CF_PASSWORD="${CF_PASSWORD:-}"
CF_SPACE="${CF_SPACE:-}"

while getopts "e:P:s:u:p:h" opt; do
  case $opt in
    e)
      APP_ENVIRONMENTS=$OPTARG
      ;;
    P)
      PROJECT_NAME=$OPTARG
      ;;
    s)
      CF_SPACE=$OPTARG
      ;;
    u)
      CF_USER=$OPTARG
      ;;
    p)
      CF_PASSWORD=$OPTARG
      ;;
    h)
      usage
      exit;;
    *)
      usage
      exit;;
  esac
done

if [[
  -z "$APP_ENVIRONMENTS" ||
  -z "$CF_USER" ||
  -z "$CF_PASSWORD"
]]
then
  usage
fi

export CF_USER
export CF_PASSWORD

CF_SPACES="$(cf curl /v3/spaces)"

IFS=',' read -ra ARR_APP_ENVIRONMENTS <<< "$APP_ENVIRONMENTS"
for APP_ENVIRONMENT in "${ARR_APP_ENVIRONMENTS[@]}"; do

  if [ -z "$CF_SPACE" ]
  then
    if [ "$APP_ENVIRONMENT" == "prod" ]
    then
      CF_SPACE="sct-production"
    else
      CF_SPACE="sct-$APP_ENVIRONMENT"
    fi
  fi
  
  if [ "$APP_ENVIRONMENT" == "production" ]
  then
    APP_NAME="$PROJECT_NAME-prod"
  else
    APP_NAME="$PROJECT_NAME-$APP_ENVIRONMENT"
  fi

  CF_SPACE_RESOURCE="$(echo "$CF_SPACES" | jq -r --arg s "$CF_SPACE" '.resources[] | select(.name == $s)')"
  if [ -z "$CF_SPACE_RESOURCE" ]
  then
    echo "Error: Space not found - '$CF_SPACE'"
    exit 1
  else
    CF_SPACE_GUID="$(echo "$CF_SPACE_RESOURCE" | jq -r '.guid')"
  fi

  CF_APPS_REQUEST_ARGS=$(
    jq -n \
    --arg name "$APP_NAME" \
    --arg space_guid "$CF_SPACE_GUID" \
    '{
      name: $name,
      space_guids: $space_guid
    }'
  )

  CF_APPS="$(cf curl -X GET /v3/apps -d "$CF_APPS_REQUEST_ARGS")"
  CF_APPS_RESOURCE="$(echo "$CF_APPS" | jq -r --arg a "$APP_NAME" '.resources[] | select(.name == $a)')"
  if [ -z "$CF_APPS_RESOURCE" ]
  then
    echo "Error: App not found - '$APP_NAME' in Space '$CF_SPACE'"
    exit 1
  else
    CF_APP_GUID="$(echo "$CF_APPS_RESOURCE" | jq -r '.guid')"
  fi
  
  APP_ENV="$(cf curl -X GET /v3/apps/"$CF_APP_GUID"/env)"
  
  ENVARS="$(echo "$APP_ENV" | jq -r '.environment_variables')"

  if [ "$APP_ENVIRONMENT" == "production" ]
  then
    APP_ENV_FILE_NAME="prod_app_env.yml"
  else
    APP_ENV_FILE_NAME="${APP_ENVIRONMENT}_app_env.yml"
  fi
  
  if [ -f "$APP_ENV_FILE_NAME" ]
  then
    read -r -p "File $APP_ENV_FILE_NAME exists, overwrite? (y/n): " WRITE_ENV_FILE
  else
    WRITE_ENV_FILE="y"
  fi
  
  if [ "$WRITE_ENV_FILE" == "y" ]
  then
    echo "---" > "${APP_ENVIRONMENT}_app_env.yml"
    echo "$ENVARS" | yq eval -P >> "${APP_ENVIRONMENT}_app_env.yml"
    echo "${APP_ENVIRONMENT}_app_env.yml file created :)" 
  fi
done
